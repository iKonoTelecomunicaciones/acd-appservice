stages:
  - test
  - build
  - deploy

lint:
  image: python:3.9
  services:
    - postgres:12.2-alpine
  variables:
    POSTGRES_DB: test
    POSTGRES_USER: ikono
    POSTGRES_PASSWORD: secretfoo
    POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
  stage: test
  before_script:
    - python --version
    - pip install --upgrade pip
    - python3 -m pip install -r requirements.txt
    - python3 -m pip install -r requirements-dev.txt
  script:
    # Black formatting check
    - echo "** Running Black **"
    - black --check --diff acd_appservice/
    # Isort formatting check
    - echo "** Running Isort **"
    - isort --check --diff acd_appservice/
    # Pytest unit tests
    - echo "** Running the API test **"
    - pytest --reruns 5 acd_appservice --cache-clear

build-push-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login docker.io --username $DOCKER_HUB_USERNAME --password-stdin
  script:
    # Version tag
    - TAG_VERSION=$(grep "version = " acd_appservice/version.py | cut -d"=" -f2 | sed 's/"//g; s/+dev.*/-dev/g' | xargs)
    - echo "** Building and pushing '${TAG_VERSION}' docker image **"
    - docker build -t ${ACD_IMAGE}:v${TAG_VERSION} .
    - docker push ${ACD_IMAGE}:v${TAG_VERSION}
    # Testing
    - echo "** Building and pushing Testing docker image **"
    - docker build -t ${ACD_IMAGE}:${TAG_TESTING} .
    - docker push ${ACD_IMAGE}:${TAG_TESTING}
    # Dev
    - echo "** Building and pushing Dev docker image **"
    - docker build -t ${ACD_IMAGE}:${TAG_DEV} .
    - docker push ${ACD_IMAGE}:${TAG_DEV}
  only:
    - master

deploy-testing:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - echo "** Connecting to testing server **"
    # Update the apt package index
    - apt-get update -qq
    # If ssh-agent does not exist, install openssh-client
    - "which ssh-agent || ( apt-get install -qq openssh-client )"
    # Start the ssh-agent in the background
    - eval $(ssh-agent -s)
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    # Create the SSH config directory
    - mkdir -p ~/.ssh
    # Disable StrictHostKeyChecking ask in SSH config
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    # Download updated docker image to testing server
    - echo "** Download updated docker image **"
    - ssh -tt $TESTING "docker pull $ACD_IMAGE:$TAG_TESTING"
    - echo "** Update acd image in registered domains **"
    - >
      for domain in ${DOMAINS}; do

        echo " >> Setting service variables"
        stack_name=$(echo ${domain} | tr -d '.')
        service=$(echo ${domain} | cut -d '.' -f1)
        acd_service="${stack_name}_${service}-acd-as"

        echo " >> Remove the service if exists"
        ssh -tt $TESTING " \
          if docker service ps ${acd_service}; then \
            docker service rm ${acd_service}; \
          else \
            echo 'The service ${acd_service} is not exists'; \
          fi;
        "

        echo " >> Deploy the service"
        docker_compose_file="/mnt/shared/matrix/${domain}/docker-compose.yml"
        ssh -tt $TESTING " \
          docker-compose -f ${docker_compose_file} config | \
            docker stack deploy -c - ${stack_name};
        "
      done
  only:
    - master