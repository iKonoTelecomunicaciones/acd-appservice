# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: http://synapse:8008
    # The domain of the homeserver (for MXIDs, etc).
    domain: dominio_cliente.com
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true
    asmux: false
    # Number of retries for all HTTP requests if the homeserver isn't reachable.
    http_retry_count: 4

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://nombrecliente-mapi:29000
    # When using https:// the TLS certificate and key files for the address.
    tls_cert: false
    tls_key: false

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29000
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. Only Postgres is currently supported.
    database: postgres://synapse:onokisoft@postgres/mapi_db
    # Additional arguments for asyncpg.create_pool()
    # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
    database_opts:
        min_size: 5
        max_size: 10

    # The unique ID of this appservice.
    id: acd_az
    # bot_displayname: AppService bridge bot
    # bot_avatar: mxc://maunium.net/JxjlbZUlCPULEeHZSwleUXQv
    community_id: false
    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: "This value is generated when generating the registration"
    hs_token: "This value is generated when generating the registration"
    # Primary user of the appservice
    bot_username: acd
    # Email to be able to use the main bot
    email: "soporte@ikono.com.co"

# Bridge config
bridge:

    # Localpart template of MXIDs for AppService users.
    # {userid} is replaced with the user ID of the AppService user.
    command_prefix: "!acd"
    username_template: "acd{userid}"
    periodic_reconnect:
        # Interval in seconds in which to automatically reconnect all users.
        # This can be used to automatically mitigate the bug where AppService stops sending messages.
        # Set to -1 to disable periodic reconnections entirely.
        interval: -1
        # Whether or not the bridge should backfill chats when reconnecting.
        resync: true
        # Should even disconnected users be reconnected?
        always: false
    # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
    provisioning:
        # Whether or not the provisioning API should be enabled.
        enabled: true
        # The prefix to use in the provisioning API endpoints.
        prefix: /provision
        # The shared secret to authorize users of the API.
        # Set to "generate" to generate and save a new token.
        shared_secret: generate


acd:
    # Regex for get the puppet ID
    acd_regex: "^@[a-zA-Z-_]+(?P<userid>[0-9]+):.+$"
    # Feature for naming customer rooms
    keep_room_name: false
    # Prefix for identification of agent user
    agent_prefix: "@agent"
    # agent control room, all agents must be here
    control_room_id: ""
    # Prefix for identification of supervisor user
    supervisor_prefix: "@supervisor"
    # bot that manages the menu
    # If the menubot property is, then menubots cannot be.
    menubot:
        user_id: "@menubot:example.com"
        command_prefix: "!menubot"

    # menubots:
    #   "@menubota:example.com":
    #     user_prefix: "gswA"
    #     command_prefix: "!menubotA"

    #   "@menubotb:example.com":
    #     user_prefix: "gswB"
    #     command_prefix: "!menubotB"

    # force join
    device_name_regex: "Element Android|Móvil|Mobile"
    force_join: false
    # Timeout for agent invites
    agent_invite_timeout: 15
    # Interval for automatic search pending rooms (3 minutes by default | 180s)
    search_pending_rooms_interval: 180
    # The prefix to special messages that are going to be processed in frontend.
    frontend_command_prefix: '!element'
    #This is a message that reaches the client when it is transferred
    transfer_message: "Has sido transferido a {agentname}."
    # Message to show when a chat is asigned an agent
    joined_agent_message: "{agentname} se ha unido al chat."
    # Supervisors to invite
    supervisors_to_invite:
        power_level: 99
        # If active is true, then invite users to invitees
        invite: false
        invitees:
            - "@supervisor:example.com"
    voice_call:
        call_message: "Incoming call"
        no_voice_call: "Hola! Te informamos que no atendemos llamadas de WhatsApp. Por favor envíanos un mensaje para comunicarte con nosotros."
    # Action to take when user sends message and assigned agent is offline
    # - keep: no action, keep agent in room and no message is shown
    # - transfer: if agent is offline more than x secs, it is kicked out and someone new is invited
    # - menu: if agent is offline more than x secs, the customer is presented a menu of options
    offline_agent_action: menu
    # agent offline time in seconds to take an action if the customer sends a message
    offline_agent_timeout: 0
    # message to show when agent is offline longer than offline_agent_timeout
    offline_agent_message: "{agentname} no está disponible en este momento."
    # message to show to the user if 'menu' action is active, and the user selects to be transferred
    # to another agent, but no sagent is available
    no_agents_for_transfer: "No hay agentes disponibles para la transferencia."
    # Parameters to send resolve chat template
    resolve_chat:
        notice: "Chat resuelto"
        message: "La conversación ha finalizado. Gracias por comunicarte con nosotros."
        template_name: "conversacion_finalizada"
        template_data: []
        language: "es"


# ACD will send below commands to interact with any WA bridge
bridges:
  twilio:
    # Prefix to be listened by bridge
    prefix: "!tw"
    # Prefix for users created
    user_prefix: "twa"
    create_portal_command: "pm"
    send_template_command: "template"
  mautrix:
    # Mautrix UserID
    mxid: "@mx_whatsappbot:localhost"
    # Prefix to be listened by bridge
    prefix: "!wa"
    # Prefix for users created
    user_prefix: "mxwa"
    create_portal_command: "pm"
    send_template_command: ""
    # Postfix to identify a customer
    postfix_template: "(WA)"
    set_relay: "set-relay"
    set_permissions: "set-pl {mxid} {power_level}"
    notice_messages:
      # When I can't create a chat with WhatsApp
      phone_is_not_on_whatsapp: "^The server said \\+(?P<phone_number>[0-9]+) is not on WhatsApp$"
    # Settings for provisioning API
    provisioning:
        url_base: "http://172.17.0.1:29665/_matrix/provision"
        shared_secret: "gZv0kzqrZ4PFHb614IusrTuhPTDhUalJWq9xXL1K9OKBIs2bsxGD6SUOkgyN4OWP"

  instagram:
    # Prefix to be listened by bridge
    prefix: "!ig"
    # Prefix for users created
    user_prefix: "ig"
    # create_portal_command: "pm"
    send_template_command: "template"
    set_permissions: "set-pl {power_level} {mxid}"
  gupshup:
    # Prefix to be listened by bridge
    prefix: "!gs"
    # Prefix for users created
    user_prefix: "gsmx"
    create_portal_command: "pm"
    send_template_command: "template"


utils:
    # Whatsapp connection timeout (seconds)
    wait_ping_time: 7200
    # regex to email match
    regex_email: "^[(a-z0-9\\_\\-\\.)]+@[(a-z0-9\\_\\-\\.)]+\\.[(a-z)]{2,15}$"
    # Regex to extract user phone number from matrix user ID
    username_regex: "^@(?P<user_prefix>.+)_(?P<number>[0-9]{8,}):.+$"


logging:
    version: 1
    formatters:
        colored:
            (): acd_appservice.util.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
    handlers:
        file:
            class: logging.handlers.RotatingFileHandler
            formatter: normal
            filename: ./acd-az.log
            maxBytes: 10485760
            backupCount: 10
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: DEBUG
        acd:
            level: DEBUG
        aiohttp:
            level: INFO
    root:
        level: DEBUG
        handlers: [file, console]
