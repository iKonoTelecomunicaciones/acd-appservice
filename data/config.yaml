# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: http://synapse:8008
    # The domain of the homeserver (for MXIDs, etc).
    domain: darknet
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: false
    asmux: false
    # Number of retries for all HTTP requests if the homeserver isn't reachable.
    http_retry_count: 4

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://acd-az:26666
    # When using https:// the TLS certificate and key files for the address.
    tls_cert: false
    tls_key: false

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 26666
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. Only Postgres is currently supported.
    database: postgres://ikono:secretfoo@acd-az-db/acd_db
    # Additional arguments for asyncpg.create_pool()
    # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
    database_opts:
        min_size: 5
        max_size: 10
    id: acd_az
    # bot_displayname: AppService bridge bot
    # bot_avatar: mxc://maunium.net/JxjlbZUlCPULEeHZSwleUXQv
    community_id: false
    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: qk0LgBaJlr7JcpOxBImkWjgVfYXiWrDsf93j7BSUvwR7y9LDv5Txnzqx0SCZS1OX
    hs_token: nZ3RLNmQDqjfGPy2lLvfS1NCrKUIik0w9C70VkpxLURyxKEWMkQDT4uywdTqVLGA
    # Primary user of the appservice
    bot_username: acd
    # Email to be able to use the main bot
    email: soporte@ikono.com.co

# Bridge config
bridge:

    # Localpart template of MXIDs for AppService users.
    # {userid} is replaced with the user ID of the AppService user.
    command_prefix: '!acd'
    username_template: acd_{userid}
    periodic_reconnect:
        # Interval in seconds in which to automatically reconnect all users.
        # This can be used to automatically mitigate the bug where AppService stops sending messages.
        # Set to -1 to disable periodic reconnections entirely.
        interval: -1
        # Whether or not the bridge should backfill chats when reconnecting.
        resync: true
        # Should even disconnected users be reconnected?
        always: false
    # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
    provisioning:
        # Whether or not the provisioning API should be enabled.
        enabled: true
        # The prefix to use in the provisioning API endpoints.
        prefix: /provision
        # The shared secret to authorize users of the API.
        # Set to "generate" to generate and save a new token.
        shared_secret: generate


    management_room_text:
        welcome: Hello, I'm a WhatsApp bridge bat.
        welcome_connected: Use `help` for help.
        welcome_unconnected: Use `help` for help or `login` to log in.
        additional_help: ''
    bot_user_id: '@mx_whatsappbot:localhost'
    prefix: '!wa'
    invitees_to_rooms:
    - '@admin_mapi:dominio_cliente.com'
    - '@mx_whatsappbot:dominio_cliente.com'
acd:
    # Regex for get the puppet ID
    acd_regex: ^@[a-zA-Z-_]+(?P<userid>[0-9]+):.+$
    # Feature for naming customer rooms
    keep_room_name: true
    # Prefix for identification of agent user
    agent_prefix: '@agent'
    # agent control room, all agents must be here
    control_room_id: '!YLGVnyUJURfVHmYleL:darknet'
    # Prefix for identification of supervisor user
    supervisor_prefix: '@supervisor'
    # bot that manages the menu
    # If the menubot property is, then menubots cannot be.
    menubot:
        user_id: '@menubot:darknet'
        command_prefix: '!menubot'
    device_name_regex: Element Android|Móvil|Mobile
    force_join: false
    # Timeout for agent invites
    agent_invite_timeout: 15
    # Interval for automatic search pending rooms (3 minutes by default | 180s)
    search_pending_rooms_interval: 180
    # The prefix to special messages that are going to be processed in frontend.
    frontend_command_prefix: '!element'

# ACD will send below commands to interact with any WA bridge
bridges:
    twilio:
    # Prefix to be listened by bridge
        prefix: '!tw'
    # Prefix for users created
        user_prefix: tw
        create_portal_command: pm
        send_template_command: template
    mautrix:
    # Mautrix UserID
        mxid: '@mx_whatsappbot:darknet'
    # Prefix to be listened by bridge
        prefix: '!wa'
    # Prefix for users created
        user_prefix: mxwa
        create_portal_command: pm
        send_template_command: ''
        login: login
    # Postfix to identify a customer
        postfix_template: (WA)
        set_relay: set-relay
        set_permissions: set-pl {mxid} {power_level}
        notice_messages:
          # When I can't create a chat with WhatsApp
            phone_is_not_on_whatsapp: ^The server said \+(?P<phone_number>[0-9]+) is not on WhatsApp$
          # Mautrix login notice
            logged_in: You're already logged in
            logged_out: Logged out successfully.
            not_logged_in: You're not logged in.
          # Toca agregar este notice porque Tulir no le puso apóstrofe a este notice :'v
            not_logged_in_2: You are not logged in
            external_loggged_out: You were logged out from another device. Please link the bridge to your phone again.
          # When a chat was successfully created
            created_portal_room: ^Created portal room with \+(?P<phone_number>[0-9]+) and invited you to it.$
          # When a chat already exists
            existing_portal: ^You already have a private chat portal with \+(?P<phone_number>[0-9]+) at .+(?P<room_id>!\w+:[\w.-]+).+$
        # Settings for provisioning API
        provisioning:
            url_base: http://172.17.0.1:29665/_matrix/provision
            shared_secret: gZv0kzqrZ4PFHb614IusrTuhPTDhUalJWq9xXL1K9OKBIs2bsxGD6SUOkgyN4OWP

    instagram:
    # Prefix to be listened by bridge
        prefix: '!ig'
    # Prefix for users created
        user_prefix: ig
    # create_portal_command: "pm"
        send_template_command: template
        set_permissions: set-pl {power_level} {mxid}
    gupshup:
    # Prefix to be listened by bridge
        prefix: '!gs'
    # Prefix for users created
        user_prefix: gsmx
        create_portal_command: pm
        send_template_command: template


utils:
    # Whatsapp connection timeout (seconds)
    wait_ping_time: 7200
    # regex to email match
    regex_email: ^[(a-z0-9\_\-\.)]+@[(a-z0-9\_\-\.)]+\.[(a-z)]{2,15}$
    # Regex to extract user phone number from matrix user ID
    username_regex: ^@(?P<user_prefix>.+)_(?P<number>[0-9]{8,}):.+$


logging:
    version: 1
    formatters:
        colored:
            (): acd_appservice.util.ColorFormatter
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
        normal:
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
    handlers:
        file:
            class: logging.handlers.RotatingFileHandler
            formatter: normal
            filename: ./acd-az.log
            maxBytes: 10485760
            backupCount: 10
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: DEBUG
        acd:
            level: DEBUG
        aiohttp:
            level: INFO
    root:
        level: DEBUG
        handlers: [file, console]
