# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: http://synapse:8008
    # The domain of the homeserver (for MXIDs, etc).
    domain: dominio_cliente.com

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://acd-as:29601
    # When using https:// the TLS certificate and key files for the address.
    tls_cert: false
    tls_key: false

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29601
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1
    # The full URI to the database. Only Postgres is currently supported.
    database: postgres://synapse:onokisoft@postgres/acd_db
    # Additional arguments for asyncpg.create_pool()
    # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
    database_opts:
        min_size: 5
        max_size: 10

    # The unique ID of this appservice.
    id: acd_az
    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: "This value is generated when generating the registration"
    hs_token: "This value is generated when generating the registration"
    # Primary user of the appservice
    bot_username: acd

    # Default password for the puppets
    # Set to "generate" to generate and save a new token.
    puppet_password: generate

    ephemeral_events: true

# Bridge config
bridge:
    # Localpart template of MXIDs for AppService users.
    # {userid} is replaced with the user ID of the AppService user.
    command_prefix: "!acd"
    username_template: "acd{userid}"
    periodic_reconnect:
        # Interval in seconds in which to automatically reconnect all users.
        # This can be used to automatically mitigate the bug where AppService stops sending messages.
        # Set to -1 to disable periodic reconnections entirely.
        interval: -1
        # Whether or not the bridge should backfill chats when reconnecting.
        resync: true
        # Should even disconnected users be reconnected?
        always: false
    # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
    provisioning:
        # Whether or not the provisioning API should be enabled.
        enabled: true
        # The prefix to use in the provisioning API endpoints.
        prefix: /provision

    # Room used by acd[n] to distribute a chats and interact with a bridge
    puppet_control_room:
        name: CONTROL ROOM
        topic: Puppet control room

        # These guests will be room admins
        invitees:
            - "@admin:dominio_cliente.com"
            - "@supervisor:dominio_cliente.com"


    # Permissions for using the acd.
    # Permitted values:
    #       user - Use the acd with puppeting.
    #      admin - Use and administrate the acd.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
        "@admin:dominio_cliente.com": "admin"
        "@supervisor:dominio_cliente.com": "admin"

acd:
    # User domain spaces you want to manipulate
    namespaces:
        - "agente{userid}"
        - "menubot{userid}"
        - "supervisor{userid}"

    # Regex for get the puppet ID
    acd_regex: "^@[a-zA-Z-_]+(?P<userid>[0-9]+):.+$"
    # Regex to extract user id guest from matrix user ID
    username_regex_guest: "^@(?P<number>[0-9]{1,}):.+$"
    # Feature for naming customer rooms
    keep_room_name: true
    # Features for naming rooms by company_phone
    # Si quieres que las salas se actualicen cada vez que el cliente
    # cambie de nombre, entonces deber tener keep_room_name en true y numbers_in_rooms en true
    numbers_in_rooms: false
    # Prefix for identification of agent user
    agent_prefix: "@agent"
    # Prefix for identification of supervisor user
    supervisor_prefix: "@supervisor"
    # Prefix for identification of menubot user
    menubot_prefix: "@menubot"
    # Prefijo de los comandos del menubot
    menubot_command_prefix: "!menubot"
    # force join
    device_name_regex: "Element Android|Móvil|Mobile"
    force_join: false
    # Timeout for agent invites
    agent_invite_timeout: 15
    # The prefix to special messages that are going to be processed in frontend.
    frontend_command_prefix: '!element'
    #This is a message that reaches the client when it is transferred
    transfer_message: "Has sido transferido a {agentname}."
    # Message to show when a chat is asigned an agent
    joined_agent_message: "{agentname} se ha unido al chat."
    # Message to show when a chat was forced transfer and target agent is not available.
    unavailable_agent_in_transfer: "{agentname} no se encuentra disponible en este momento. El agente se contactará contigo lo más pronto posible"
    # Supervisors to invite
    supervisors_to_invite:
        power_level: 99
        # If invite is true, then invite users to invitees
        invite: false
        invitees:
            - "@supervisor:dominio_cliente.com"
    voice_call:
        call_message: "Incoming call"
        no_voice_call: "Hola! Te informamos que no atendemos llamadas de WhatsApp. Por favor envíanos un mensaje para comunicarte con nosotros."
    #offline messages and actions
    offline:
        # Action to take when user sends message and assigned agent is offline
        # - keep: no action, keep agent in room and no message is shown
        # - transfer: if agent is offline more than x secs, it is kicked out and someone new is invited
        # - menu: if agent is offline more than x secs, the customer is presented a menu of options
        agent_action: keep
        # message to show when agent is offline longer than offline_agent_timeout
        agent_message: "{agentname} no está disponible en este momento."
        # User requested to see the menu
        menu_user_selection: El usuario solicitó ver el menú
        # The offline menu that will be display to the client
        menu:
            header: "Puedes esperar hasta que {agentname} esté disponible o enviar:<br><br>"
            options:
                "1":
                    text: "Para ser atendido por otra persona de la misma área."
                "2":
                    text: "Para ver el menú."
    # message to show to the user if 'menu' action is active, and the user selects to be transferred
    # to another agent, but no sagent is available
    no_agents_for_transfer: "No hay agentes disponibles para la transferencia."
    # Parameters to send resolve chat template
    resolve_chat:
        notice: "Chat resuelto"
        message: "La conversación ha finalizado. Gracias por comunicarte con nosotros."
        template_name: "conversacion_finalizada"
        template_data: []
        language: "es"

    # Action to take when we need that some agent get out of a room
    # NOTE: The namespaces must be properly configured to use the 'leave' option
    # - leave: it makes an identity assertion of an agent to make it leave the room
    # - kick: it makes that the room admin kick the agent from the room
    remove_method: "leave"

    queues:
        # Does the ACD have to `invite` users to the queue or do a forced `join`?
        # You can only force `join` users from your own server.
        # Possible fields:
        # invite: Invite users to the queue room
        # join: Forces users to join the queue
        user_add_method: "invite"
        # Should the queues created by the ACD be `public` or `private`?
        visibility: "private"
        # This will always be invited even if you have `user_add_method` in `join`.
        invitees:
            - "@admin:dominio_cliente.com"
            - "@supervisor:dominio_cliente.com"

    enqueued_portals:
        # Interval for automatic search pending rooms (3 minutes by default | 180s)
        search_pending_rooms_interval: 180
        # How many chats will be distributed per agent when portals are enqueued
        portals_per_agent: 1
        # Max iterations in enqueued portals
        max_iterations: 50
        # Min time to distribute enqueued rooms when max iterations are reached
        min_time: 20

    # Use it to distribute chat when acd doesn't have the campaign selected by customer
    available_agents_room: "!PjgOHubuTvAlzPVTCr:dominio_cliente.com"

    # Allows you to define how many groups of rooms can be solved in bulk resolve
    bulk_resolve:
        block_size: 5

    # Do you want to use synapse presence to distribute chat?,
    # if not, you can use agent operation login to do it.
    use_presence: false

    # When acd* joins to the room before customer message arrived, we need to process destination
    process_destination_when_joining: true

# ACD will send below commands to interact with any WA bridge
bridges:

  mautrix:
    # Mautrix UserID
    mxid: "@mx_whatsappbot:dominio_cliente.com"
    # Prefix to be listened by bridge
    prefix: "!wa"
    # Prefix for users created
    user_prefix: "mxwa"
    create_portal_command: "pm"
    send_template_command: ""
    # Postfix to identify a customer
    postfix_template: "(WA)"
    set_relay: "set-relay"
    set_permissions: "set-pl {mxid} {power_level}"
    # Bridge support formated messages
    format_messages: true
    notice_messages:
      # When I can't create a chat with WhatsApp
        phone_is_not_on_whatsapp: "^The server said \\+(?P<phone_number>[0-9]+) is not on WhatsApp$"
    logout_messages:
        - "You were logged out from another device. Please link the bridge to your phone again."
        - "Connecting to WhatsApp failed as the device was unlinked"
        - "Logged out successfully."

    # If you are already a room administrator, configure your power levels.
    initial_state:
        # if enabled, these power levels will be configured at room initialization.
        enabled: false
        power_levels:
            events_default: 0
            users_default: 0
            state_default: 50
            events:
                m.room.avatar: 0
                m.room.name: 0
                m.room.topic: 0
    # Settings for provisioning API
    provisioning:
        url_base: "http://mautrix-whatsapp:29318/_matrix/provision"
        shared_secret: ""
        endpoints:
            login: "/v1/login"
            pm: "/v1/pm"
            logout: "/v1/logout"
            ping: "/v1/ping"

  instagram:
    # Instagram UserID
    mxid: "@instagrambot:dominio_cliente.com"
    # Prefix to be listened by bridge
    prefix: "!ig"
    # Prefix for users created
    user_prefix: "ig"
    # create_portal_command: "pm"
    send_template_command: ""
    # Postfix to identify a customer
    postfix_template: "(IG)"
    set_permissions: "set-pl {mxid} {power_level}"
    set_relay: "set-relay"
    # Bridge support formated messages
    format_messages: false
    # If you are already a room administrator, configure your power levels.
    initial_state:
        # if enabled, these power levels will be configured at room initialization.
        enabled: false
        power_levels:
            events_default: 0
            users_default: 0
            state_default: 50
            events:
                m.room.avatar: 0
                m.room.name: 0
                m.room.topic: 0
    # Settings for provisioning API
    provisioning:
        url_base: "http://mautrix-instagram:29320/_matrix/provision"
        shared_secret: ""
        endpoints:
            login: "/v1/api/login"
            login_2fa: "/v1/api/login/2fa"
            login_resend_2fa_sms: "/v1/api/login/resend_2fa_sms"
            login_checkpoint: "/v1/api/login/checkpoint"
            logout: "/v1/api/logout"
            ping: "/v1/api/whoami"

  facebook:
    # Facebook UserID
    mxid: "@facebookbot:dominio_cliente.com"
    # Prefix to be listened by bridge
    prefix: "!fb"
    # Prefix for users created
    user_prefix: "fb"
    # create_portal_command: "pm"
    send_template_command: ""
    # Postfix to identify a customer
    postfix_template: "(FB)"
    set_permissions: "set-pl {mxid} {power_level}"
    set_relay: "set-relay"
    # Bridge support formated messages
    format_messages: false
    # If you are already a room administrator, configure your power levels.
    initial_state:
        # if enabled, these power levels will be configured at room initialization.
        enabled: false
        power_levels:
            events_default: 0
            users_default: 0
            state_default: 50
            events:
                m.room.avatar: 0
                m.room.name: 0
                m.room.topic: 0
    # Settings for provisioning API
    provisioning:
        url_base: "http://mautrix-facebook:29319/public"
        shared_secret: ""
        endpoints:
            login: "/api/login"
            login_2fa: "/api/login/2fa"
            login_check_approved: "/api/login/check_approved"
            login_approved: "/api/login/approved"
            reconnect: "/api/reconnect"
            refresh: "/api/refresh"
            logout: "/api/logout"
            ping: "/api/whoami"

  gupshup:
    # Gupshup UserID
    mxid: "@gs_whatsappbot:dominio_cliente.com"
    # Prefix to be listened by bridge
    prefix: "!gs"
    # Prefix for users created
    user_prefix: "gswa"
    create_portal_command: "pm"
    send_template_command: "template"
    # Postfix to identify a customer
    postfix_template: "(GS)"
    set_permissions: "set-pl {mxid} {power_level}"
    set_relay: "set-relay"
    # Bridge support formated messages
    format_messages: true
    # If you are already a room administrator, configure your power levels.
    initial_state:
        # if enabled, these power levels will be configured at room initialization.
        enabled: false
        power_levels:
            events_default: 0
            users_default: 0
            state_default: 50
            events:
                m.room.avatar: 0
                m.room.name: 0
                m.room.topic: 0
    # Settings for provisioning API
    provisioning:
        url_base: "http://gupshup:29324/_matrix/provision"
        shared_secret: ""
        endpoints:
            template: "/v1/template"
            register_app: "/v1/register_app"
            pm: "/v1/pm"

  chatterbox:
    # Prefix to be listened by bridge
    prefix: "!plg"
    # Prefix for users created
    user_prefix: "plg"
    # If you are already a room administrator, configure your power levels.
    initial_state:
        # if enabled, these power levels will be configured at room initialization.
        enabled: true
        power_levels:
            events_default: 0
            users_default: 0
            state_default: 50
            events:
                m.room.avatar: 0
                m.room.message: 0
                m.room.name: 0
                m.room.topic: 0


utils:
    # Whatsapp connection timeout (seconds)
    wait_ping_time: 7200
    # regex to email match
    regex_email: "^[(a-z0-9\\_\\-\\.)]+@[(a-z0-9\\_\\-\\.)]+\\.[(a-z)]{2,15}$"
    # Regex to extract user phone number from matrix user ID
    username_regex: "^@(?P<user_prefix>.+)_(?P<number>[0-9]{8,}):.+$"
    message_bot_war: "Ignorando mensaje entrante porque este pertenece a una cuenta registrada en iKono Chat"
    # Monday to friday
    # business_hours:
    #     business_hours_message: ""
    #     show_menu: false
    #     monday:
    #         - "08:00-12:00"
    #         - "13:00-18:00"
    #     tuesday:
    #         - "08:00-12:00"
    #         - "13:00-18:00"
    #     wednesday:
    #         - "08:00-12:00"
    #         - "13:00-18:00"
    #     thursday:
    #         - "08:00-12:00"
    #         - "13:00-18:00"
    #     friday:
    #         - "08:00-12:00"
    #         - "13:00-18:00"
    #     saturday:
    #         - "08:00-12:00"
    #         - "13:00-18:00"
    #     sunday:
    #     holiday:
    #         - "08:00-12:00"
    #         - "13:00-18:00"
    timezone: "America/Bogota"

ikono_api:
  base_url: "https://api.ikono.im"
  login_url: "/v1/auth/token"
  holidays_url: "/v1/holidays"
  password: ""


logging:
    version: 1
    formatters:
        colored:
            (): acd_appservice.util.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
    handlers:
        file:
            class: logging.handlers.RotatingFileHandler
            formatter: normal
            filename: ./acd-az.log
            maxBytes: 10485760
            backupCount: 10
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: DEBUG
        acd:
            level: DEBUG
        aiohttp:
            level: DEBUG
    root:
        level: DEBUG
        handlers: [file, console]
